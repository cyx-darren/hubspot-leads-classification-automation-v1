def validate_attribution_with_ga4(self):
    """Validate attributions using GA4 traffic patterns"""
    if not self.use_ga4 or self.ga4_traffic_data is None:
        return
        
    print("Validating attributions with GA4 traffic patterns...")
    
    validated_count = 0
    boosted_count = 0
    
    for idx, lead in self.leads_df.iterrows():
        if lead['attributed_source'] in ['SEO', 'PPC', 'Unknown']:
            # Check for traffic near lead time
            lead_time = pd.to_datetime(lead['first_ticket_date'])
            
            # Look for traffic within 2 hours
            time_window_start = lead_time - timedelta(hours=2)
            time_window_end = lead_time + timedelta(hours=1)
            
            # Find matching traffic
            matching_traffic = self.ga4_traffic_data[
                (self.ga4_traffic_data['datetime'] >= time_window_start) &
                (self.ga4_traffic_data['datetime'] <= time_window_end)
            ]
            
            if not matching_traffic.empty:
                # Check source alignment
                source_map = {
                    'SEO': ['google', 'bing', 'yahoo'],  # organic sources
                    'PPC': ['google', 'bing', 'facebook']  # paid sources
                }
                
                medium_map = {
                    'SEO': ['organic'],
                    'PPC': ['cpc', 'ppc', 'paid', 'cpm']
                }
                
                current_source = lead['attributed_source']
                
                # Find relevant traffic
                if current_source in source_map:
                    relevant_traffic = matching_traffic[
                        (matching_traffic['source'].isin(source_map[current_source])) &
                        (matching_traffic['medium'].isin(medium_map.get(current_source, [])))
                    ]
                    
                    if not relevant_traffic.empty:
                        # Boost confidence
                        sessions = relevant_traffic['sessions'].sum()
                        boost_factor = min(1.3, 1 + (sessions / 100))
                        
                        new_confidence = min(100, lead['attribution_confidence'] * boost_factor)
                        self.leads_df.loc[idx, 'attribution_confidence'] = new_confidence
                        self.leads_df.loc[idx, 'ga4_validated'] = True
                        self.leads_df.loc[idx, 'ga4_sessions'] = sessions
                        
                        validated_count += 1
                        if new_confidence > lead['attribution_confidence']:
                            boosted_count += 1
    
    print(f"âœ“ GA4 validation complete: {validated_count} attributions validated")
    print(f"  - {boosted_count} confidence scores boosted")