"The test is failing because analyze_email_content_for_attribution_override() doesn't exist. Please implement this method in the LeadAttributionAnalyzer class:

1. Add the method to traffic_attribution.py:

def analyze_email_content_for_attribution_override(self):
    '''Analyze email content and subject lines to correct misattributions'''
    
    # Add new columns if they don't exist
    if 'drill_down' not in self.leads_df.columns:
        self.leads_df['drill_down'] = ''
    if 'email_content_override' not in self.leads_df.columns:
        self.leads_df['email_content_override'] = False
    if 'override_reason' not in self.leads_df.columns:
        self.leads_df['override_reason'] = ''
    if 'original_attributed_source' not in self.leads_df.columns:
        self.leads_df['original_attributed_source'] = self.leads_df['attributed_source']
    
    # Pattern definitions
    ppc_campaign_patterns = {
        'lanyard_lp': r"You've Got a New Enquiry! \(Lanyard LP\)",
        'badge_lp': r"You've Got a New Enquiry! \(Badge LP\)"
    }
    
    payment_patterns = [
        r'payment (scheduled|has been released|is currently routing)',
        r'remittance advice',
        r'provide your latest SOA',
        r'for our checking and payment'
    ]
    
    repeat_patterns = [
        r'(have|had|we) ordered .* from you',
        r'^Hi \w+,',
        r'our last order was',
        r'ordered before',
        r'still have our artwork'
    ]
    
    referral_patterns = [
        r'got your contact from my colleague[,\s]+(\w+)',
        r'taken over .* from (\w+)',
        r'(\w+) (shared|kindly shared) your details',
        r'my colleague[,\s]+(\w+)[,\s]+who printed'
    ]
    
    # Process each lead
    for idx, row in self.leads_df.iterrows():
        # Get email content and subject (handle missing data)
        subject = str(row.get('email_subject', '')).lower()
        content = str(row.get('email_content', '')).lower()
        
        # Check PPC campaigns first (highest priority)
        for campaign_name, pattern in ppc_campaign_patterns.items():
            if re.search(pattern, subject, re.IGNORECASE) or re.search(pattern, content, re.IGNORECASE):
                self.leads_df.loc[idx, 'attributed_source'] = 'PPC'
                self.leads_df.loc[idx, 'drill_down'] = f'Google Ads - {campaign_name}'
                self.leads_df.loc[idx, 'email_content_override'] = True
                self.leads_df.loc[idx, 'override_reason'] = f'PPC campaign detected: {campaign_name}'
                break
        
        # Check for payment emails (indicates existing customer)
        elif any(re.search(pattern, content, re.IGNORECASE) for pattern in payment_patterns):
            self.leads_df.loc[idx, 'attributed_source'] = 'Direct'
            self.leads_df.loc[idx, 'email_content_override'] = True
            self.leads_df.loc[idx, 'override_reason'] = 'Payment-related communication (existing customer)'
        
        # Check for repeat customers
        elif any(re.search(pattern, content, re.IGNORECASE) for pattern in repeat_patterns):
            self.leads_df.loc[idx, 'attributed_source'] = 'Direct'
            self.leads_df.loc[idx, 'email_content_override'] = True
            self.leads_df.loc[idx, 'override_reason'] = 'Repeat customer identified'
        
        # Check for referrals
        else:
            for pattern in referral_patterns:
                match = re.search(pattern, content, re.IGNORECASE)
                if match:
                    self.leads_df.loc[idx, 'attributed_source'] = 'Referral'
                    self.leads_df.loc[idx, 'email_content_override'] = True
                    # Try to extract referrer name
                    referrer = match.group(1) if match.groups() else 'colleague'
                    self.leads_df.loc[idx, 'drill_down'] = f'Referral from {referrer}'
                    self.leads_df.loc[idx, 'override_reason'] = f'Referral detected from {referrer}'
                    break
    
    # Log summary of changes
    overrides = self.leads_df[self.leads_df['email_content_override'] == True]
    print(f'\\nEmail content analysis completed:')
    print(f'Total overrides: {len(overrides)}')
    
    if len(overrides) > 0:
        print('\\nAttribution changes:')
        for source in overrides['attributed_source'].value_counts().index:
            count = len(overrides[overrides['attributed_source'] == source])
            print(f'  â†’ {source}: {count} leads')

2. Also ensure the test data has the required columns (email_subject and email_content) that the method expects.

3. After implementing, run the test again to verify it works correctly."